#!/usr/bin/python3

# MIT License
# By Chimmie Firefly & Alexandr Vasilyev

import os
import sys
import time
import logging
import signal
from evdev import UInput, ecodes, AbsInfo
import usb
import yaml

# Setup logging to a file
logging.basicConfig(filename='/var/log/10moons-driver.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Determine the config file path
path = "/etc/10moons-driver/config.yaml"
if not os.path.exists(path):
    path = "/usr/share/10moons-driver/config.yaml"
    if not os.path.exists(path):
        logging.error("Config file not found.")
        sys.exit(1)

# Loading tablet configuration
with open(path, "r") as f:
    config = yaml.load(f, Loader=yaml.FullLoader)

# Get the required ecodes from configuration
pen_codes = []
btn_codes = []
for k, v in config["actions"].items():
    codes = btn_codes if k == "tablet_buttons" else pen_codes
    if isinstance(v, list):
        codes.extend(v)
    else:
        codes.append(v)

temp = []
for c in pen_codes:
    temp.extend([ecodes.ecodes[x] for x in c.split("+")])
pen_codes = temp

temp = []
for c in btn_codes:
    temp.extend([ecodes.ecodes[x] for x in c.split("+")])
btn_codes = temp

pen_events = {
    ecodes.EV_KEY: pen_codes,
    ecodes.EV_ABS: [
        (ecodes.ABS_X, AbsInfo(0, 0, config["pen"]["max_x"], 0, 0, config["pen"]["resolution_x"])),
        (ecodes.ABS_Y, AbsInfo(0, 0, config["pen"]["max_y"], 0, 0, config["pen"]["resolution_y"])),
        (ecodes.ABS_PRESSURE, AbsInfo(0, 0, config["pen"]["max_pressure"], 0, 0, 0))
    ],
}

btn_events = {ecodes.EV_KEY: btn_codes}

def initialize_device():
    """Finds and initializes the tablet device."""
    dev = None
    while dev is None:
        try:
            dev = usb.core.find(idVendor=config["vendor_id"], idProduct=config["product_id"])
            if dev is None:
                logging.error("Device not found. Retrying...")
                time.sleep(5)
            else:
                logging.info(f"Device {dev} found.")
        except usb.core.USBError as e:
            logging.error(f"USB Error: {e}. Retrying...")
            time.sleep(5)
    
    # Reset the device
    dev.reset()

    # Drop default kernel driver from all devices
    for j in [0, 1, 2]:
        if dev.is_kernel_driver_active(j):
            dev.detach_kernel_driver(j)

    # Set new configuration
    dev.set_configuration()

    return dev

def run_driver():
    """Main function to run the tablet driver."""
    dev = initialize_device()

    ep = dev[0].interfaces()[2].endpoints()[0]  # Endpoint for reading data

    vpen = UInput(events=pen_events, name=config["xinput_name"], version=0x3)
    vbtn = UInput(events=btn_events, name=config["xinput_name"] + "_buttons", version=0x3)

    pressed = -1

    max_x = config["pen"]["max_x"] * config["settings"]["swap_direction_x"]
    max_y = config["pen"]["max_y"] * config["settings"]["swap_direction_y"]
    x1, x2, y1, y2 = (3, 2, 5, 4) if config["settings"]["swap_axis"] else (5, 4, 3, 2)

    while True:
        try:
            data = dev.read(ep.bEndpointAddress, ep.wMaxPacketSize)
            if data[1] in [192, 193]:  # Pen actions
                pen_x = abs(max_x - (data[x1] * 255 + data[x2]))
                pen_y = abs(max_y - (data[y1] * 255 + data[y2]))
                pen_pressure = data[7] * 255 + data[6]
                vpen.write(ecodes.EV_ABS, ecodes.ABS_X, pen_x)
                vpen.write(ecodes.EV_ABS, ecodes.ABS_Y, pen_y)
                vpen.write(ecodes.EV_ABS, ecodes.ABS_PRESSURE, pen_pressure)
                if data[1] == 192:  # Pen touch
                    vpen.write(ecodes.EV_KEY, ecodes.BTN_TOUCH, 0)
                else:
                    vpen.write(ecodes.EV_KEY, ecodes.BTN_TOUCH, 1)
            elif data[0] == 2:  # Tablet button actions
                press_type = 1
                if data[1] == 2:  # First button
                    pressed = 0
                elif data[1] == 4:  # Second button
                    pressed = 1
                elif data[3] == 44:  # Third button
                    pressed = 2
                elif data[3] == 43:  # Fourth button
                    pressed = 3
                else:
                    press_type = 0
                key_codes = config["actions"]["tablet_buttons"][pressed].split("+")
                for key in key_codes:
                    act = ecodes.ecodes[key]
                    vbtn.write(ecodes.EV_KEY, act, press_type)
            # Flush
            vpen.syn()
            vbtn.syn()
        except usb.core.USBError as e:
            if e.args[0] == 19:  # Device disconnected
                logging.warning("Device disconnected. Reconnecting...")
                dev = initialize_device()
        except KeyboardInterrupt:
            logging.info("Driver terminated by user.")
            break
        except Exception as e:
            logging.error(f"An unexpected error occurred: {e}")

    vpen.close()
    vbtn.close()

def handle_sigterm(signal, frame):
    """Handle SIGTERM signal."""
    logging.info("SIGTERM received, terminating gracefully.")
    sys.exit(0)

if __name__ == "__main__":
    # Register the SIGTERM handler
    signal.signal(signal.SIGTERM, handle_sigterm)
    
    try:
        run_driver()
    except Exception as e:
        logging.error(f"Failed to start the driver: {e}")
        sys.exit(1)
